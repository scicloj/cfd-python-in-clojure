[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CFD Python in Clojure",
    "section": "",
    "text": "1 CFD Python in Clojure\nWe attempt to convert Python written 12 steps of Navier-Stokes learning modules into Clojure. By doing so, the objectives are: 1. going through the steps to learn Computational Fluid Dynamics(CFD) in general 2. convert Python written functions into Clojure, so we could further evolve it to make it use-able in related science research in the future",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CFD Python in Clojure</span>"
    ]
  },
  {
    "objectID": "index.html#navier-stokes-equations",
    "href": "index.html#navier-stokes-equations",
    "title": "CFD Python in Clojure",
    "section": "1.1 Navier-Stokes equations",
    "text": "1.1 Navier-Stokes equations\nNavier-Stokes equations basically describes the movement of viscous fluids using partial differential equations(PDE).\nIn general, the equations explains who fluids reacts around given environment, with states of its density, pressure and temperature.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CFD Python in Clojure</span>"
    ]
  },
  {
    "objectID": "index.html#steps",
    "href": "index.html#steps",
    "title": "CFD Python in Clojure",
    "section": "1.2 Steps",
    "text": "1.2 Steps\n\nStep 1 - 1-D Linear Convection\nStep 2 - Nonlinear Convection\nConvergence and the CFL Condition\nStep 3 - 1-D Diffusion Equation\nStep 4- 1-D Burgers’ Equation\n\n\nsource: notebooks/index.clj",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CFD Python in Clojure</span>"
    ]
  },
  {
    "objectID": "steps.step_01.html",
    "href": "steps.step_01.html",
    "title": "2  1-D Linear Convection",
    "section": "",
    "text": "2.1 What is Convection\nTo briefly describe, convection is like movement affected by the fluid flow itself.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1-D Linear Convection</span>"
    ]
  },
  {
    "objectID": "steps.step_01.html#the-equation",
    "href": "steps.step_01.html#the-equation",
    "title": "2  1-D Linear Convection",
    "section": "2.2 The Equation",
    "text": "2.2 The Equation\n\\[\\frac{\\partial u }{\\partial t} + c \\frac{\\partial u}{\\partial x} = 0\\]\n\n\\(c\\): speed of initial wave\nInitial condition(at the time \\(t = 0\\), the velocity of the flow, and here it’s understood as a wave) denotes as \\(u_0\\):\n\n\\[u(x, 0) = u_0(x)\\]\nThen the exact solution of the linear convection equation:\n\\[u(x, t) = u_0(x - ct)\\]\nWe discretize this equation in both space and time, using the Forward difference scheme for the time derivative and the Backward difference scheme for the space derivative from the definition of a derivative,\nConsider discretizing the spatial coordinate \\(x\\) into points that we index from \\(i = 0\\) to \\(N\\), and stepping in discrete time intervals of size \\(\\Delta t\\)\n\\[\\frac{\\partial u}{\\partial x} \\approx \\frac{u(x + \\Delta x) - u(x)}{\\Delta x}\\]\ndiscrete equation follows:\n\\[\\frac{u_i^{n+1} - u_i^n}{\\Delta t} + c \\frac{u_i^n - u_{i-1}^n}{\\Delta x} = 0\\]\n\n\\(n\\) & \\(n + 1\\): two consecutive steps in time\n\\(i - 1\\) & \\(i\\): two neighboring points of the discretized x coordinate We can solve for our unknown to get an equation that allows us to advance in time, as follows:\n\n\\[u_i^{n+1} = n_i^n - c \\frac{\\Delta t}{\\Delta x}(u_i^n - u_{i-1}^n)\\]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1-D Linear Convection</span>"
    ]
  },
  {
    "objectID": "steps.step_01.html#implementation",
    "href": "steps.step_01.html#implementation",
    "title": "2  1-D Linear Convection",
    "section": "2.3 Implementation",
    "text": "2.3 Implementation\nnx: steps (= 41) dx = 2 / (nx - 1) (x-start = 0, x-end = 2) nt: the number of timesteps we want to calculate (= 25) dt: the amount of time each timestep covers (delta t) (= .25) c: wave speed (= 1)\ninitial conditions: 1. initial velocity \\(u_0\\) is given as \\(u = 2\\) in the interval \\(0.5 \\le x \\le 1\\) and \\(u = 1\\) everywhere else in \\((0, 2)\\)\narray-u outputs:\n\n[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0,\n 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n\ntime to implement discretization of the convention equation using a finite-difference scheme\n\n(def params {:x-start 0\n             :x-end   2\n             :nx      41\n             :nt      20\n             :c       1.0\n             :dt      0.025})\n\n\n(def array-x (one-d/create-array-x params))\n\n\n(def array-u (one-d/create-array-u {:array-x array-x}))\n\n\n(let [nx      41\n      array-x (one-d/create-array-x {:nx nx})\n      array-u (one-d/create-array-u {:array-x array-x})\n      u       (one-d/simulate array-u params)]\n  (kind/vega-lite\n    {:mark     \"line\"\n     :width    500 :height 300\n     :encoding {:x {:field \"x\" :type \"quantitative\"}\n                :y {:field \"y\" :type \"quantitative\"}}\n     :data     {:values (into [] (map #(hash-map :x % :y %2) array-x u))}}))\n\n\n\nsource: notebooks/steps/step_01.clj",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1-D Linear Convection</span>"
    ]
  },
  {
    "objectID": "steps.step_02.html",
    "href": "steps.step_02.html",
    "title": "3  Nonlinear Convection",
    "section": "",
    "text": "3.1 Implementations\nGoing to implement nonlinear convection in 1D:\n\\[\\frac{\\partial u }{\\partial t} + u \\frac{\\partial u}{\\partial x} = 0\\]\ndifference: instead of a constant \\(c\\), we’re multiplying the solution \\(u\\) onto the second term\nThen the discretized equation is:\n\\[\\frac{u_i^{n+1} - u_i^n}{\\Delta t} + u_i^n \\frac{u_i^n - u_{i-1}^n}{\\Delta x} = 0\\]\nThen, solving for \\(u_i^{n+1}\\):\n\\[u_i^{n+1} = u_i^n - u_i^n \\frac{\\Delta t}{\\Delta x}(u_i^n - u_{i-1}^n)\\]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Nonlinear Convection</span>"
    ]
  },
  {
    "objectID": "steps.step_02.html#implementations",
    "href": "steps.step_02.html#implementations",
    "title": "3  Nonlinear Convection",
    "section": "",
    "text": "(def init-params {:x-start 0\n                  :x-end   2\n                  :nx      41\n                  :nt      20\n                  :dt      0.025\n                  :co-eff  :nonlinear})\n\n\n\nsource: notebooks/steps/step_02.clj",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Nonlinear Convection</span>"
    ]
  },
  {
    "objectID": "steps.cfl_condition.html",
    "href": "steps.cfl_condition.html",
    "title": "4  Convergence and the CFL Condition",
    "section": "",
    "text": "4.1 Reasons for the breakage\ninitial and boundary conditions:\n41 points of grid and 0.025 sec of timestep.\nExperimenting increasing the size of the grid below to see what happens:\n\\(nx = 41\\)\n\\(nx = 61\\)\n\\(nx = 81\\)\nincreasing grid size means travelling distance within a \\(\\Delta t\\) becomes grater than \\(\\Delta x\\), which correlates to \\(nx\\). In order to enforce the stability, we introduce Courant number \\(\\sigma_{max}\\). This ensures stability with given discretization params.\n\\[\\sigma = \\frac{u \\Delta t}{\\Delta x} \\le \\sigma_{max}\\]\n\\(nx = 41\\)\n\\(nx = 61\\)\n\\(nx = 81\\)\n\\(nx = 101\\)\n\\(nx = 121\\)\nThe results show with a grid size \\(nx\\) increases, convection travels shorter distance. With a given \\(nt = 20\\) in the init param, the time windows becomes shorter as a result of increasing \\(nx\\).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Convergence and the CFL Condition</span>"
    ]
  },
  {
    "objectID": "steps.cfl_condition.html#reasons-for-the-breakage",
    "href": "steps.cfl_condition.html#reasons-for-the-breakage",
    "title": "4  Convergence and the CFL Condition",
    "section": "",
    "text": "(def init-params' {:x-start 0\n                   :x-end   2\n                   :nx      41\n                   :nt      20\n                   :c       1.0\n                   :sigma   0.5})\n\n\n\n\n\n\n\n\n\n\n\n\n\nsource: notebooks/steps/cfl_condition.clj",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Convergence and the CFL Condition</span>"
    ]
  },
  {
    "objectID": "steps.step_03.html",
    "href": "steps.step_03.html",
    "title": "5  1-D Diffusion Equation",
    "section": "",
    "text": "5.1 Discretizing \\(\\frac{\\partial^2 u}{\\partial x^2}\\)\nThe diffusion equation in 1D is:\n\\[\\frac{\\partial u}{\\partial t} = \\nu \\frac{\\partial^2 u}{\\partial x^2}\\]\nThe equation has second-order derivative, which we first learn how to implement in the code. \\(\\nu\\) is the value of viscosity.\nDescretizing the second-order derivative w/ the Central Difference Scheme: a combination of Forward Difference and Backward Difference of the first derivative.\n\\[u_{i+1} = u_i + \\Delta x \\frac{\\partial u}{\\partial x}\\bigg|_i + \\frac{\\Delta x^2}{2} \\frac{\\partial ^2 u}{\\partial x^2}\\bigg|_i + \\frac{\\Delta x^3}{3!} \\frac{\\partial ^3 u}{\\partial x^3}\\bigg|_i + O(\\Delta x^4)\\]\n\\[u_{i-1} = u_i - \\Delta x \\frac{\\partial u}{\\partial x}\\bigg|_i + \\frac{\\Delta x^2}{2} \\frac{\\partial ^2 u}{\\partial x^2}\\bigg|_i - \\frac{\\Delta x^3}{3!} \\frac{\\partial ^3 u}{\\partial x^3}\\bigg|_i + O(\\Delta x^4)\\]\nNeglecting \\(O(\\Delta x^4)\\) or higher(very small, so neglect-able..)\n\\[u_{i+1} + u_{i_1} = 2u_i + \\Delta x^2 \\frac{\\partial^2 u}{\\partial x^2}\\bigg|_i\\]\nthen put it together w/ the diffusion equation:\n\\[\\frac{u_i^{n+1} - u_i^n}{\\Delta t} = \\nu\\frac{u_{i+1}^n + u_{i-1}^n - 2u_i^n}{\\Delta x^2}\\]\nthen programmatic equation to solve \\(u\\) is:\n\\[u_i^{n+1} = \\nu\\frac{\\Delta t}{\\Delta x^2}(n_{i+1}^n + u_{i-1}^n - 2u_i^n) + u_i^n\\]",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>1-D Diffusion Equation</span>"
    ]
  },
  {
    "objectID": "steps.step_03.html#discretizing-fracpartial2-upartial-x2",
    "href": "steps.step_03.html#discretizing-fracpartial2-upartial-x2",
    "title": "5  1-D Diffusion Equation",
    "section": "",
    "text": "(def init-params\n  {:mode  :diffusion\n   :nx    42\n   :nt    20\n   :nu    0.3\n   :sigma 0.2})\n\n\n\nsource: notebooks/steps/step_03.clj",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>1-D Diffusion Equation</span>"
    ]
  },
  {
    "objectID": "steps.step_04.html",
    "href": "steps.step_04.html",
    "title": "6  1-D Burgers’ Equation",
    "section": "",
    "text": "6.1 Initials & Boundary Conditions\nA fundamental PDE & convection-diffusion equation.\n\\[\\frac{\\partial u}{\\partial t} + u \\frac{\\partial u}{\\partial x} = \\nu\\frac{\\partial^2 u}{\\partial x^2}\\]\nPreviously, convection eq’n:\n\\[\\frac{\\partial u}{\\partial t} + u\\frac{\\partial u}{\\partial x} = 0\\]\nand diffusion eq’n:\n\\[\\frac{\\partial u}{\\partial t} = \\nu\\frac{\\partial^2 u}{\\partial x^2}\\]\ncombining discretized equations from previous steps\n\\[\\frac{u_i^{n+1} - u_i^n}{\\Delta t} + u_i^n\\frac{u_i^n - u_{i-1}^n}{\\Delta x} = \\nu\\frac{u_{i+1}^n + u_{i-1}^n - 2u_i^n}{\\Delta x^2}\\]\nrearranging the above results:\n\\[u_i^{n+1} = u_i^n - u_i^n \\frac{\\Delta t}{\\Delta x}(u_i^n - u_{i-1}^n) + \\nu\\frac{\\Delta t}{\\Delta x^2}(u_{i+1}^n + u_{i-1}^n - 2u_i^n)\\]",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>1-D Burgers' Equation</span>"
    ]
  },
  {
    "objectID": "steps.step_04.html#initials-boundary-conditions",
    "href": "steps.step_04.html#initials-boundary-conditions",
    "title": "6  1-D Burgers’ Equation",
    "section": "",
    "text": "6.1.1 Initial Conditions\n\\[u = -\\frac{2\\nu}{\\phi}\\frac{\\partial \\phi}{\\partial x} + 4\\]\n\\[\\phi = \\exp\\bigg(\\frac{-(x - 4t)^2}{4\\nu(t + 1)}\\bigg) + \\exp\\bigg(\\frac{-(x - 4t - 2\\pi)^2}{4\\nu(t + 1)}\\bigg)\\]\n\n\n6.1.2 Boundary Condition\n\\[u(0) = u(2\\pi)\\]\nThis is called a periodic boundary condition.\nTesting Burgers’ Eqn: note: currently not using adding equation very organically, so we need to refactor.\n\n(one-d/burgers-u {:t 1.0 :x 4.0 :nu 3.0})\n\n\n3.4917066\n\nWorking on generating lambdify-ed function:\n\n(def nx 101)\n\n\n(def nt 100)\n\n\n(def nu 0.07)\n\n\n(def dx (* 2.0 PI (/ 1 (- nx 1))))\n\n\n(def dt (* dx nu))\n\n\n(def x-start 0)\n\n\n(def x-end (* 2.0 PI))\n\n\n(def init-params\n  {:nx      nx\n   :dx      dx\n   :nt      nt\n   :x-start x-start\n   :x-end   x-end\n   :nu      nu\n   :dt      dt\n   :mode    :burger})\n\nCalculate u and plot:\n\n[3.982484, 4.0450406, 4.1075974, 4.170154, 4.232711, 4.2952676,\n 4.3578243, 4.420381, 4.482938, 4.5454946, 4.6080513, 4.670608,\n 4.733165, 4.7957215, 4.8582783, 4.920835, 4.983392, 5.045948,\n 5.108505, 5.1710615, 5.2336183, 5.296175, 5.3587317, 5.4212885,\n 5.483845, 5.546402, 5.6089587, 5.6715155, 5.734072, 5.796629,\n 5.8591857, 5.9217424, 5.984299, 6.0468554, 6.109412, 6.171969,\n 6.2345257, 6.2970824, 6.359639, 6.422196, 6.4847527, 6.5473094,\n 6.609866, 6.672423, 6.734979, 6.797534, 6.860055, 6.9220233,\n 6.9748416, 6.880349, 5.152262, 1.6489367, 1.0293779, 1.0453354,\n 1.1050574, 1.1674429, 1.2299894, 1.2925454, 1.3551022, 1.4176589,\n 1.4802157, 1.5427722, 1.6053289, 1.6678857, 1.7304426, 1.7929994,\n 1.8555557, 1.9181124, 1.9806691, 2.0432258, 2.1057825, 2.1683393,\n 2.230896, 2.2934527, 2.3560095, 2.4185662, 2.481123, 2.5436797,\n 2.6062365, 2.6687932, 2.73135, 2.7939067, 2.8564634, 2.9190202,\n 2.9815764, 3.0441332, 3.10669, 3.1692467, 3.2318034, 3.2943602,\n 3.356917, 3.4194736, 3.4820304, 3.5445871, 3.6071439, 3.6697006,\n 3.7322574, 3.794814, 3.8573709, 3.9199276, 3.9824843]\n\n\n^^“saw-tooth function”",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>1-D Burgers' Equation</span>"
    ]
  },
  {
    "objectID": "steps.step_04.html#periodic-boundary-conditions",
    "href": "steps.step_04.html#periodic-boundary-conditions",
    "title": "6  1-D Burgers’ Equation",
    "section": "6.2 Periodic Boundary Conditions",
    "text": "6.2 Periodic Boundary Conditions\nWith periodic boundary conditions, when a point gets to the right-hand side of the frame, it wraps around back to the front of the frame.\nBringing the discretized equation from the above:\n\\[u_i^{n+1} = u_i^n - u_i^n \\frac{\\Delta t}{\\Delta x}(u_i^n - u_{i-1}^n) + \\nu\\frac{\\Delta t}{\\Delta x^2}(u_{i+1}^n + u_{i-1}^n - 2u_i^n)\\]\nDrawing both analytical and computational results in the same plot:\n\n\nsource: notebooks/steps/step_04.clj",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>1-D Burgers' Equation</span>"
    ]
  }
]