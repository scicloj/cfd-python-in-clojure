---
format:
  html:
    toc: true
    toc-depth: 4
    theme: [cosmo, notebooks/custom.scss]
    output-file: steps.step_09.html
code-block-background: true

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style><style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="steps.step_09_files/md-default0.js" type="text/javascript"></script><script src="steps.step_09_files/md-default1.js" type="text/javascript"></script><script src="steps.step_09_files/katex2.js" type="text/javascript"></script><script src="steps.step_09_files/plotly3.js" type="text/javascript"></script><link href="https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.css" rel="stylesheet" type="text/css" />
In the previous step, we solved the 2D Burgers' equation: an important equation in the study of fluid
mechanics because it contains the full convective nonlinearity of the flow equations. With that exercise,
we also build the experience to incrementally code a Navier-Stokes solver.

In the next two steps, we will solve Laplace and then Poisson equation. We will then put it all together!


## Step 9: 2-D Laplace Equation

Here is [Laplace's equation](https://en.wikipedia.org/wiki/Laplace%27s_equation) in 2D:

$$\frac{\partial ^2 p}{\partial x^2} + \frac{\partial ^2 p}{\partial y^2} = 0$$

We know how to discretize a 2nd order derivative. But this about this for a minute - Laplace's
equation has the features typical of diffusion phenomena. For this reason, it has to be discretized with
[central differences](https://en.wikipedia.org/wiki/Central_differencing_scheme), so that the
discretization is consistent with the physics we want to simulate.

The discretized equation is:

$$\frac{p_{i+1, j}^n - 2p_{i,j}^n + p_{i-1,j}^n}{\Delta x^2} + \frac{p_{i,j+1}^n - 2p_{i,j}^n + p_{i, j-1}^n}{\Delta y^2} = 0$$

Notice that the Laplace Equation does not have a time dependence - there is no $p^{n+1}$.
Instead of tracking a wave through time (like in the previous steps), the Laplace equation calculates
the equilibrium state of a system under the supplied boundary conditions.

If you have taken coursework in Heat Transfer, you will recognize the Laplace Equation
as the steady-state heat equation.

Instead of calculating where the system will be at some time $t$, we will iteratively solve for
$p_{i,j}^n$ until it meets a condition that we specify. The system will reach equilibrium only
as the number of iterations tends to $\infty$, but we can approximate the equilibrium state by
iterating until the change between one iteration and the next is very small.

Let's rearrange the discretized equation, solving for $p_{i,j}^n$:

$$p_{i,j}^n = \frac{\Delta y^2(p_{i+1,j}^n+p_{i-1,j}^n)+\Delta x^2(p_{i,j+1}^n + p_{i,j-1}^n)}{2(\Delta x^2 + \Delta y^2)}$$

Using second order central-difference schemes in both directions is the most widely applied method
for the Laplace operator. It is also known as the **five-point difference operator**, alluding to its stencil.

We are going to solve Laplace's equation numerically by assuming an initial state of $p = 0$ everywhere.
Then we add boundary conditions as follows:

$p = 0$ at $x = 0$
$p = y$ at $x = 2$
$\frac{\\Delta p}{\\Delta y} = 0$ at $y = 0, 1$

Under these conditions, there is an analytical solution for Laplace's equation:

$$p(x,y)=\frac{x}{4}-4\sum_{n=1,odd}^{\infty}\frac{1}{(n\pi)^2\sinh2n\pi}\sinh n\pi x\cos n\pi y$$


Define the initial parameters


::: {.sourceClojure}
```clojure
(def nx 31)
```
:::



::: {.sourceClojure}
```clojure
(def ny 31)
```
:::



::: {.sourceClojure}
```clojure
(def spatial-init-param
  {:nx nx :x-start 0 :x-end 2 :dx (double (/ 2 (dec nx)))
   :ny ny :y-start 0 :y-end 1 :dy (double (/ 1 (dec ny)))})
```
:::



Have the discretized 2D spatial array ready:


::: {.sourceClojure}
```clojure
(def spatial-array (two-d/create-array-2d spatial-init-param))
```
:::



::: {.sourceClojure}
```clojure
(def array-p (two-d/create-init-u
               (assoc spatial-init-param
                 :d-type Double/TYPE
                 :condition-fn (fn [x-val y-val]
                                 (if (= x-val ((comp last first) spatial-array))
                                   (double y-val)
                                   0.0)))
               spatial-array))
```
:::




### Define the Laplace function

We will write the Laplace function to solve for $p$ until the change in the [L1 Norm](http://en.wikipedia.org/wiki/Norm_(mathematics)#Taxicab_norm_or_Manhattan_norm)
of $p$ is less that a specified value.



::: {.sourceClojure}
```clojure
(defn laplace-2d [{:keys [spatial-array array-p nx ny dx dy l1norm-target]
                   :as   params}]
  (let [[_array-x array-y] spatial-array
        !l1-norm (atom 1.0)]
    (while (> @!l1-norm l1norm-target)
      (let [pn (two-d/clone-2d-array array-p)]
        (dotimes [y-idx (dec ny)]
          (when (pos? y-idx)
            (dotimes [x-idx (dec nx)]
              (when (pos? x-idx)
                (let [p-j-i+1 (aget pn y-idx (inc x-idx))
                      p-j-i-1 (aget pn y-idx (dec x-idx))
                      p-j+1-i (aget pn (inc y-idx) x-idx)
                      p-j-1-i (aget pn (dec y-idx) x-idx)
                      dx-2    (pow dx 2)
                      dy-2    (pow dy 2)]
                  (aset array-p y-idx x-idx
                    (double (/ (+ (* dy-2 (+ p-j-i+1 p-j-i-1))
                                  (* dx-2 (+ p-j+1-i p-j-1-i)))
                               (* 2 (+ dx-2 dy-2))))))))))
        ;; boundary conditions
        ;; p = 0 @ x = 0
        (dotimes [y-idx ny]
          (aset array-p y-idx 0 0.0))
        ;; p = y @ x = 2
        (dotimes [y-idx ny]
          (aset array-p y-idx (dec nx) (double (aget array-y y-idx))))
        ;; dp/dy = 0 @ y = 0
        (dotimes [x-idx nx]
          (aset array-p 0 x-idx (aget array-p 1 x-idx)))
        ;; dp/dy = 0 @ y = 1
        (dotimes [x-idx nx]
          (aset array-p (dec ny) x-idx (aget array-p (- ny 2) x-idx)))
        ;; calculate l1nom
        (reset! !l1-norm (l1-norm params pn))))
    array-p))
```
:::


Now let's try looking at our initial condition plot.



::: {.sourceClojure}
```clojure
(def plotly-surface-plot-base-opts
  (let [[array-x array-y] spatial-array]
    {:layout {:scene {:xaxis {:range [0.0 2.1]}
                      :yaxis {:range [0.0 1.1]}
                      :zaxis {:range [0.0 1.1]}}}
     :data   [{:x       array-x
               :y       array-y
               :z       array-p
               :type    :surface
               :opacity 0.20
               :color   "size"
               :marker  {:colorscale :Viridis}}]}))
```
:::



```{=html}
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"x":[0.0,0.06666667,0.13333334,0.2,0.26666668,0.33333334,0.4,0.46666667,0.53333336,0.6,0.6666667,0.73333335,0.8,0.8666667,0.93333334,1.0,1.0666667,1.1333333,1.2,1.2666667,1.3333334,1.4,1.4666667,1.5333333,1.6,1.6666666,1.7333333,1.8,1.8666667,1.9333333,2.0],"y":[0.0,0.033333335,0.06666667,0.1,0.13333334,0.16666667,0.2,0.23333333,0.26666668,0.3,0.33333334,0.36666667,0.4,0.43333334,0.46666667,0.5,0.53333336,0.56666666,0.6,0.6333333,0.6666667,0.7,0.73333335,0.76666665,0.8,0.8333333,0.8666667,0.9,0.93333334,0.96666664,1.0],"z":[[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.03333333507180214],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.06666667014360428],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.10000000149011612],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.13333334028720856],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1666666716337204],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.20000000298023224],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.23333333432674408],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.2666666805744171],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.30000001192092896],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.3333333432674408],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.36666667461395264],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.4000000059604645],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.4333333373069763],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.46666666865348816],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.5],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.5333333611488342],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.5666666626930237],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.6000000238418579],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.6333333253860474],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.6666666865348816],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.699999988079071],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.7333333492279053],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.7666666507720947],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.800000011920929],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.8333333134651184],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.8666666746139526],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.8999999761581421],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.9333333373069763],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.9666666388511658],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0]],"type":"surface","opacity":0.2,"color":"size","marker":{"colorscale":"Viridis"}}], {"scene":{"xaxis":{"range":[0.0,2.1]},"yaxis":{"range":[0.0,1.1]},"zaxis":{"range":[0.0,1.1]}}}, {});</script></div>
```



We will have init params for our simulation:


::: {.sourceClojure}
```clojure
(def init-params
  (assoc spatial-init-param
         :spatial-array spatial-array
         :array-p array-p
         :l1norm-target 1e-4))
```
:::



Then run the simulation:


::: {.sourceClojure}
```clojure
(let [simulated-data (laplace-2d init-params)]
  (kind/plotly
    (update-in plotly-surface-plot-base-opts [:data 0] #(assoc % :z simulated-data))))
```
:::



```{=html}
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"x":[0.0,0.06666667,0.13333334,0.2,0.26666668,0.33333334,0.4,0.46666667,0.53333336,0.6,0.6666667,0.73333335,0.8,0.8666667,0.93333334,1.0,1.0666667,1.1333333,1.2,1.2666667,1.3333334,1.4,1.4666667,1.5333333,1.6,1.6666666,1.7333333,1.8,1.8666667,1.9333333,2.0],"y":[0.0,0.033333335,0.06666667,0.1,0.13333334,0.16666667,0.2,0.23333333,0.26666668,0.3,0.33333334,0.36666667,0.4,0.43333334,0.46666667,0.5,0.53333336,0.56666666,0.6,0.6333333,0.6666667,0.7,0.73333335,0.76666665,0.8,0.8333333,0.8666667,0.9,0.93333334,0.96666664,1.0],"z":[[0.0,0.012866522933088532,0.025759485805504963,0.03870433899202054,0.05172453118041315,0.0648404508301199,0.07806829468165705,0.09141883262072024,0.1048960323314436,0.11849549929954975,0.13220267742659583,0.1459907422037936,0.15981810123876194,0.17362539472920652,0.18733185942741792,0.20083088090596318,0.21398450587628626,0.2266166109928281,0.23850431289139418,0.24936703018103404,0.2588523222016075,0.26651713366581364,0.27180216702791243,0.27399534746968274,0.27217672175576285,0.2651290647557534,0.2511786326912962,0.22787473788762774,0.1912285935878747,0.13342456762600183,0.03333333507180214],[0.0,0.012866522933088532,0.025759485805504963,0.03870433899202054,0.05172453118041315,0.0648404508301199,0.07806829468165705,0.09141883262072024,0.1048960323314436,0.11849549929954975,0.13220267742659583,0.1459907422037936,0.15981810123876194,0.17362539472920652,0.18733185942741792,0.20083088090596318,0.21398450587628626,0.2266166109928281,0.23850431289139418,0.24936703018103404,0.2588523222016075,0.26651713366581364,0.27180216702791243,0.27399534746968274,0.27217672175576285,0.2651290647557534,0.2511786326912962,0.22787473788762774,0.1912285935878747,0.13342456762600183,0.03333333507180214],[0.0,0.012869573356306155,0.02576572974100789,0.038714069332898206,0.05173820437062877,0.06485870829286394,0.07809199294399206,0.09144908356622025,0.10493425550453829,0.11854348878261159,0.13226268655499407,0.14606559033569855,0.15991130804867912,0.17374134919833897,0.18747603311668526,0.2010100986712813,0.214207292744094,0.22689364299929346,0.2388490152705324,0.24979639425312003,0.25938806475809056,0.2671874255426206,0.27264436997945285,0.27506066513103816,0.2735387814399851,0.26690138866152213,0.2535549394901149,0.23123913115611633,0.19653746444832979,0.14400612370214463,0.06666667014360428],[0.0,0.012875638436418906,0.02577814440056601,0.03873341592123982,0.05176539041840193,0.06489500911503822,0.07813911153122466,0.09150923060921091,0.10501025337246153,0.11863890446098958,0.13238200002161332,0.1462144067329791,0.16009662447747403,0.17397189030220744,0.187762674338037,0.20136640300244482,0.2146501975275194,0.22744435075966377,0.23953417225315995,0.250649693251727,0.26045250721167384,0.26851866890398496,0.27431597501635846,0.27717289366385234,0.276234520292472,0.27039760683386904,0.2582115272169372,0.23772881993025477,0.2063231542752439,0.1607994624154379,0.10000000149011612],[0.0,0.01288464706041276,0.025796584220355412,0.038762151909331424,0.05180577054099804,0.06494892760554831,0.07820909783719984,0.09159856823314803,0.1051231342729906,0.11878062643188976,0.13255921663900044,0.1464354422240053,0.16037186947214313,0.17431429929122208,0.18818839245631702,0.20189555967744516,0.21530791970842922,0.22826207282384128,0.24055136074904762,0.2519161769210872,0.26203173529777235,0.2704924736501292,0.27679191676822806,0.2802963114384666,0.2802096961302064,0.27552774677117414,0.264980213044959,0.24697807924394144,0.21965775113394484,0.18142149784110234,0.13333334028720856],[0.0,0.01289649360289261,0.025820832992170372,0.038799940357531815,0.051858871248401335,0.0650198314865314,0.07830113108509729,0.09171604856088679,0.10527157388268242,0.11896699143741761,0.13279225549615511,0.14672609930513136,0.16073380457025732,0.17476454004654282,0.18874815528239347,0.20259128712772423,0.21617260086038123,0.22933694271992933,0.2418881237334691,0.25357998310483093,0.2641052911020362,0.2730819498315247,0.28003586060660046,0.2843798480580914,0.28538850754363665,0.28217091311036563,0.27365049014437126,0.25858571813471615,0.2357407298041901,0.2045162637957426,0.1666666716337204],[0.0,0.012911039165230249,0.02585060640017026,0.03884633818839859,0.05192406990188193,0.06510688932014852,0.07841413197661469,0.09186029368985617,0.10545383083744672,0.11919581254264523,0.13307838069170558,0.14708296323042622,0.16117817307249016,0.17531730868161655,0.1894353523984764,0.2034453383058104,0.2172339324435492,0.2306560345791381,0.24352817389002074,0.2556204354007597,0.26664663212793327,0.27625246080822574,0.2840015254158282,0.28935958316858645,0.29167868463069874,0.2901864170042293,0.2839947958480311,0.27216724217442906,0.25393797845609606,0.2292770657757927,0.20000000298023224],[0.0,0.01292811320493987,0.0258855553564383,0.038900801385809404,0.05200060202239749,0.06520908027262798,0.07854677537639582,0.09202961190463689,0.10566776725794802,0.11946440498241435,0.13341423380118972,0.14750184278651055,0.16169975134860456,0.17596609837563748,0.19024187768014234,0.20444760689838554,0.21847929476128558,0.2322035491629015,0.2454516505176881,0.25801241241060013,0.2696236883067611,0.2799625108308306,0.2886341822818358,0.29516142403407164,0.2989765063445881,0.29942338983879946,0.2957860261356675,0.2873780248786151,0.2737625399675823,0.255201659800286,0.23333333432674408],[0.0,0.012947515536081906,0.02592527009601439,0.03896269137765785,0.052087570262252116,0.0653252060993882,0.07869750587977986,0.09222201757079473,0.10591087392771631,0.11976961785212943,0.13379587365669857,0.14797782019662942,0.16229241152784799,0.17670327839868782,0.19115822951447914,0.20558625562169888,0.21989392349659134,0.23396103433988064,0.24763541933650715,0.26072676973037234,0.2729994812474411,0.2841646969088841,0.29387218715402186,0.30170367165706174,0.30717118030593427,0.3097280551915387,0.30880785739705013,0.30391950974885745,0.2948428509790217,0.28196286970055573,0.2666666805744171],[0.0,0.012969018677143316,0.02596928498315035,0.03903128252681084,0.05218395493390176,0.06545390520896932,0.07886455607802927,0.0924352544704462,0.10618029981689159,0.12010787124852969,0.13421882293002008,0.1485053094885217,0.16294919468668248,0.1775201861140315,0.19217362699331886,0.20684786405842062,0.22146109990365756,0.23590763366586504,0.2500534044778401,0.2637307959127293,0.27673277188633383,0.28880666292302776,0.29964843431414784,0.30889928038469927,0.3161483154659083,0.3209486196155892,0.32285966785557924,0.32153690376488003,0.3168933933794147,0.3093378861501252,0.30000001192092896],[0.0,0.012992370518774698,0.026017083972215787,0.03910577064205426,0.052288625971605024,0.06559366863925173,0.07904596730380223,0.09266682230012492,0.10647288559442379,0.12047519840413909,0.13467812093373244,0.14907812256734143,0.16366239353521964,0.17840723061350838,0.19327614021843603,0.20821759335820977,0.2231623606461067,0.23802035681110645,0.25267694251888817,0.26698868547245186,0.2807787078433964,0.2938320077573339,0.30589165395709617,0.31665770927123216,0.3257924363542241,0.33293812912056037,0.33775787329503076,0.3400133158449862,0.3396913358366878,0.33716824897935194,0.3333333432674408],[0.0,0.013017297280032005,0.02606810665904631,0.03918528240887637,0.052400356184973296,0.06574285775731588,0.07923961261111286,0.09291400601549794,0.10678520072678493,0.12086729230433682,0.13516838198899334,0.14968954215825728,0.1644236435185426,0.17935400655586878,0.19445283278736528,0.20967936511647275,0.22497772341912742,0.24027436608061617,0.2554751497205361,0.2704620150902284,0.2850894488783489,0.29918111528380104,0.31252751280021157,0.32488633792081656,0.3359886190752439,0.34555575709659136,0.3533350962175357,0.35916291519081944,0.36305895594350507,0.36533632119783865,0.36666667461395264],[0.0,0.013043506718412007,0.026121754851664215,0.03926888562927235,0.052517835648557686,0.06589972347452212,0.07944322171864909,0.09317390767565806,0.10711358372214493,0.12127955622900183,0.13568385865405178,0.15033240072280052,0.16522402118839852,0.18034941673048274,0.19568991452353263,0.2112160518437572,0.22688592481686193,0.24264327407263048,0.25841529540648545,0.2741102129431532,0.28961475662791103,0.3047918896749262,0.3194795065691111,0.33349147058072587,0.3466233911085604,0.3586669663552219,0.369438141444606,0.3788242908628942,0.38685064595971824,0.3937509011005299,0.4000000059604645],[0.0,0.013070691556025684,0.026177399583283543,0.03935560015041486,0.05263968705856852,0.06606242675115588,0.07965440762329762,0.09344348041230631,0.10745418504565783,0.12170715762143179,0.13621850906328986,0.15099916440714092,0.1660541486611476,0.1813818018528826,0.19697290255754696,0.21280967661116035,0.2288646673468343,0.2450994484929089,0.26146317642605926,0.2778910150481586,0.2943025423320119,0.31060039314492865,0.32666965575147006,0.3423789824600089,0.35758505328085977,0.3721429074571388,0.38592538555764017,0.39885444703881384,0.41094326210228305,0.4223380233496475,0.4333333373069763],[0.0,0.013098533081751297,0.026234388485405304,0.03944440935411329,0.05276448187678538,0.06622906015042941,0.07987069457222079,0.09371956412625368,0.10780301220402638,0.12214508465546357,0.1367660675920751,0.15168202104723721,0.16690430295505232,0.18243907610516252,0.1982867889401267,0.21444161967058772,0.2308908729837716,0.24761432116276616,0.2645834896427083,0.2817609062428992,0.29909937289097155,0.3165413941202894,0.3340190314807508,0.35145467700155897,0.3687635737334348,0.38585932463760764,0.4026639265016996,0.41912349690069567,0.4352287929425804,0.45103476225095634,0.46666666865348816],[0.0,0.013126704887177274,0.026292053434660297,0.039534272072562195,0.05289075707277337,0.06639767018988013,0.0800895470669361,0.09399892249538051,0.10815597647576783,0.12258820484705889,0.13732011803683633,0.15237297123296673,0.16776452898922548,0.18350886695394678,0.19961621305302382,0.21609283006837568,0.2329409411327218,0.2501586992143403,0.26774020119530806,0.28567554665817296,0.30395094099444325,0.3225488419397023,0.3414481481311408,0.3606244277808634,0.38005018506976934,0.3996951613995204,0.41952666820125417,0.43950994759526796,0.45960855681888746,0.47978477176317635,0.5],[0.0,0.013154876692602499,0.0263497183839137,0.039624134791008264,0.0530170322687569,0.0665662802293238,0.08030839956164057,0.09427828086449057,0.10850894074748357,0.12303132503861447,0.1378741684815368,0.1530639214186027,0.16862475502325516,0.18457865780251065,0.20094563716558272,0.21774404046564463,0.23499100928087593,0.25270307726469443,0.2708969127460399,0.2895901870705911,0.30880250909356066,0.3285562897525009,0.3488772647715426,0.36979417854522345,0.3913367963840774,0.41353099812978333,0.4363894098575155,0.45989639823964706,0.483988320727879,0.5085347828921298,0.5333333611488342],[0.0,0.013182718218325947,0.026406707286030676,0.0397129439946985,0.053141827086960476,0.06673291362857661,0.0805246865105316,0.09455436457838852,0.10885776790577595,0.12346925207252941,0.13842172701014233,0.1537467780584231,0.16947490931673606,0.1856359320541399,0.20225952354716348,0.21937598352353913,0.23701721491546185,0.2552179499309472,0.2740172259571693,0.29346007825689274,0.31359933963964787,0.3344972907082974,0.3562266404712539,0.37886987304247227,0.4025153167712086,0.4272474152158079,0.45312795067050854,0.48016544792850624,0.5082738512909363,0.5372315199932548,0.5666666626930237],[0.0,0.013209903055936098,0.026462352017642347,0.039799658515827674,0.05326367849694996,0.06689561690517684,0.08073587241512832,0.0948239373149568,0.10919836922916606,0.1238968534647704,0.1389563774190904,0.15441354174231778,0.17030503678880088,0.18666831717548893,0.2035425115795648,0.22096960828846643,0.2389959574416361,0.2576741243454025,0.2770651069678234,0.2972408803482542,0.31828712532292297,0.3403057941466142,0.36341678960564416,0.38775738484969957,0.4134769788366113,0.4407233561623912,0.46961519456603706,0.5001956038241381,0.5323664672010188,0.5658186436450691,0.6000000238418579],[0.0,0.013236112494311423,0.026516000210249975,0.03988326173620595,0.05338115796050576,0.06705248262233847,0.08093948152259535,0.09508383897501042,0.10952675222436199,0.12430911738918357,0.13947185408376167,0.15505640030626663,0.17110541445774372,0.18766372734870104,0.20477959331357973,0.22250629501244734,0.2409041588343014,0.2600430323296427,0.28000525264185955,0.30088907818294464,0.3228124330446249,0.3459165684952879,0.3703687833101265,0.39636251741248735,0.4241117507249769,0.45383456520823295,0.4857182394893149,0.5198569790810137,0.5561581566326633,0.5942332214622265,0.6333333253860474],[0.0,0.01326103925556308,0.02656702289706818,0.039962773503006685,0.05349288817383972,0.06720167174034881,0.08113312682982281,0.09533102269025508,0.10983906735652592,0.12470121128907799,0.13996211513855686,0.15566781989646686,0.1718666644399679,0.18861050328937376,0.20595628587991785,0.22396806676673225,0.24271952160121685,0.26229704158978584,0.2828034598291466,0.3043624077787223,0.3271231740459249,0.35126567597038116,0.3770046420750613,0.40459114594366546,0.4343079332679941,0.466452192919811,0.5012954620268416,0.5390065778912264,0.5795257761357253,0.6224012946609042,0.6666666865348816],[0.0,0.013284391097188136,0.026614821886119747,0.04003726161822617,0.053597559211504414,0.06734143517057091,0.08131453805550229,0.0955625905197899,0.11013165313383662,0.12506853844434715,0.14042141314174622,0.15624063297448348,0.17257986328727132,0.18949754778695618,0.20705879910212555,0.22533779606205426,0.244420782336808,0.26440976472450184,0.2854269978540465,0.30762029731368584,0.33116910996505894,0.35629102074666297,0.3832478616294199,0.41234957469535,0.44395205395196885,0.4784417021171844,0.5161936670076577,0.5574829892946644,0.6023237175570355,0.6502316547265009,0.699999988079071],[0.0,0.013305894238242813,0.026658836773241015,0.0401058527673537,0.05369394388311313,0.0674701342800879,0.08148158825365251,0.09577582741928835,0.11040107902277671,0.12540679184038572,0.14084436241451237,0.15676812226552234,0.1732366464447953,0.1903144555002867,0.20807419657787368,0.2265994044940278,0.24598795873658277,0.2663563640392902,0.2878449829781918,0.3106243234696626,0.3349024005634792,0.36093298669874857,0.38902410869447057,0.4195451832775059,0.4529291888897045,0.4896622662024371,0.5302454769506436,0.5751003825282863,0.6243742588313518,0.6776066709963754,0.7333333492279053],[0.0,0.013325296569378049,0.026698551512802204,0.040167742759176395,0.05378091212292632,0.0675862601067833,0.08163231875693606,0.09596823308529147,0.11064418569230687,0.12571200470973504,0.141226002269459,0.15724409967477787,0.1738293066227121,0.19105163552129964,0.20899054840908066,0.22773805321253368,0.2474025874645037,0.26811384920492526,0.290028751779583,0.3133386807626593,0.33827819346301574,0.3651351727135686,0.3942621134694428,0.42608743075096844,0.4611238626208654,0.4999669312002252,0.5432673076621026,0.5916418665296006,0.6454545683040857,0.7043678760419766,0.7666666507720947],[0.0,0.013342370609081096,0.026733500469055895,0.04022220595656237,0.05385744424340192,0.06768845105920013,0.08176496215662034,0.0961375512999228,0.11085812211257849,0.125980597149151,0.14156185537840069,0.1576629792300287,0.17435088489754647,0.19170042521335384,0.20979707368772546,0.22874032180046697,0.2486479497751077,0.2696613637777268,0.29195222839039914,0.3157306577465831,0.34125524960195985,0.368845222674737,0.3988947702406816,0.4318892714699661,0.46842168410765,0.5092039036812421,0.555058537396444,0.6068526483660237,0.6652791285257843,0.7302924696700399,0.800000011920929],[0.0,0.01335691617141272,0.026763273877042592,0.04026860378740636,0.05392264289684585,0.06777550889275993,0.08187796304804887,0.09628179642875526,0.11104037906713209,0.12620941825405488,0.14184798057345366,0.1580198431545594,0.17479525339860508,0.19225319384662393,0.21048427080103696,0.22959437297429458,0.24970928135172998,0.27098045562687184,0.2935922785314695,0.3177711100186801,0.3437965905911292,0.3720157335947437,0.4028604349621818,0.4368690064442386,0.47471186098214535,0.5172194072412747,0.5654028425721179,0.6204341715660286,0.6834763758079748,0.7550532683855511,0.8333333134651184],[0.0,0.013368762713887369,0.026787522648846207,0.04030639223558708,0.05397574360421753,0.06784641277369347,0.08196999629586967,0.0963992767563759,0.11118881867664224,0.1263957832593034,0.14208101943017923,0.15831050023502605,0.17515718849570644,0.1927034346003883,0.21104403362472196,0.230290100420898,0.25057396249803127,0.27205532551426825,0.2949290415025136,0.31943491618181274,0.34587014636358915,0.37460520972695327,0.4061043787242338,0.4409525429448677,0.4798906722087771,0.5238625732845786,0.574073119198246,0.6320418096997211,0.6995593533697808,0.778148034368283,0.8666666746139526],[0.0,0.013377771337877101,0.026805962468626578,0.04033512822366309,0.05401612372678852,0.06790033126416427,0.08203998260178398,0.09648861438021918,0.11130169957702697,0.12653750522998186,0.1422582360472255,0.15853153572552875,0.1754324334895711,0.19304584358816698,0.21146975174110244,0.2308192570929786,0.2512316846744513,0.27287304757153813,0.29594622998776415,0.32070139983477286,0.34744937442435486,0.37657901443385844,0.40858032041507525,0.44407596062399524,0.4838658478958026,0.5289927129810178,0.5808418046342849,0.6412910683558417,0.7128939490093471,0.7987700659552441,0.8999999761581421],[0.0,0.013383836417986987,0.02681837712817844,0.04035447481199387,0.05404330977454427,0.06793663208631123,0.08208710118897435,0.09654876142314475,0.11137769744485013,0.1266329209082059,0.14237754951360831,0.158680352122446,0.17561774991780785,0.1932763846911777,0.21175639296113605,0.23117556142211568,0.2516745894547601,0.27342375532711216,0.2966313869630036,0.3215546988219829,0.3485138168603199,0.37791025776790105,0.41025192540941247,0.44618818909002245,0.486561586642404,0.5324889309827596,0.5854983920790429,0.6477807566459263,0.7226796380209303,0.8155634046616977,0.9333333373069763],[0.0,0.013386886841203146,0.026824621063678163,0.040364205152866,0.05405698296475096,0.06795488954904134,0.08211079945128774,0.09657901236861144,0.11141592061789356,0.126680910391189,0.1424375586418855,0.15875520025416492,0.17571095672743922,0.19339233915987103,0.2119005666497285,0.2313547791863962,0.25189737632097187,0.273700787331121,0.2969760893383569,0.32198406288822823,0.3490495594077698,0.3785805496306894,0.4110941283390868,0.4472535067170109,0.4879236462719694,0.5342612547998694,0.5878746987283479,0.6511451496361951,0.7279885081849167,0.8261449573126965,0.9666666388511658],[0.0,0.013386886841203146,0.026824621063678163,0.040364205152866,0.05405698296475096,0.06795488954904134,0.08211079945128774,0.09657901236861144,0.11141592061789356,0.126680910391189,0.1424375586418855,0.15875520025416492,0.17571095672743922,0.19339233915987103,0.2119005666497285,0.2313547791863962,0.25189737632097187,0.273700787331121,0.2969760893383569,0.32198406288822823,0.3490495594077698,0.3785805496306894,0.4110941283390868,0.4472535067170109,0.4879236462719694,0.5342612547998694,0.5878746987283479,0.6511451496361951,0.7279885081849167,0.8261449573126965,0.9666666388511658]],"type":"surface","opacity":0.2,"color":"size","marker":{"colorscale":"Viridis"}}], {"scene":{"xaxis":{"range":[0.0,2.1]},"yaxis":{"range":[0.0,1.1]},"zaxis":{"range":[0.0,1.1]}}}, {});</script></div>
```



```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/cfd-python-in-clojure/blob/main/notebooks/steps/step_09.clj">notebooks/steps/step_09.clj</a></small></small></pre></div>
```
